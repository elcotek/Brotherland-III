/*
    * DAWN OF LIGHT - The first free open source DAoC server emulator
    *
    * This program is free software; you can redistribute it and/or
    * modify it under the terms of the GNU General Public License
    * as published by the Free Software Foundation; either version 2
    * of the License, or (at your option) any later version.
    *
    * This program is distributed in the hope that it will be useful,
    * but WITHOUT ANY WARRANTY; without even the implied warranty of
    * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    * GNU General Public License for more details.
    *
    * You should have received a copy of the GNU General Public License
    * along with this program; if not, write to the Free Software
    * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
    *
    * This code is generated by Karonte84
    */
using System.Reflection;
using System;
using System.Collections;
using System.Collections.Generic;
using DOL.AI.Brain;
using DOL.Events;
using DOL.GS;
using DOL.GS.Effects;
using DOL.GS.PacketHandler;
using DOL.Language;
using DOL.Database;
using DOL.GS.ServerProperties;
using DOL.GS.Spells;
using DOL.GS.Styles;



namespace DOL.GS.Spells
{
    [SpellHandler("CallOfTheHounds")]
    public class CalloftheHoundsSpellHandler : SummonSpellHandler
    {
        public CalloftheHoundsSpellHandler(GameLiving caster, Spell spell, SpellLine line) : base(caster, spell, line) { }

        public override bool CheckBeginCast(GameLiving selectedTarget)
        {
            GamePlayer player = Caster as GamePlayer;
            
            if (Caster.CurrentRegion.IsDungeon)
            {
                MessageToCaster("This ability work only in open rvr areas!", eChatType.CT_SpellResisted);
                return false;
            }
            if (Caster.PetCount >= 2)
            {
                MessageToCaster("You have too many controlled creatures!", eChatType.CT_SpellResisted);
                return false;
            }
            
            if (Caster is GamePlayer && ((GamePlayer)Caster).ControlledBrain != null && player.CurrentRegion.IsRvR == false)
            {
                MessageToCaster("This ability work only in open rvr areas!", eChatType.CT_SpellResisted);
                return false;
            }
            if (Caster.TargetObject == null)
            {
                MessageToCaster("You need a dead body as target from your realm to use this Ability!", eChatType.CT_SpellResisted);
                return false;
            }
            if (Caster.TargetObject.IsObjectAlive ||  Caster.TargetObject.Realm != Caster.Realm || Caster.TargetObject is GamePlayer == false)
            {
                MessageToCaster("You need a dead player body as target from your realm to use this Ability!", eChatType.CT_SpellResisted);
                return false;
            }
            if (Caster.TargetObject.IsWithinRadius(Caster, 500) == false)
            {
                MessageToCaster("Your Target must be in range 500!", eChatType.CT_SpellResisted);
                return false;
            }

            return base.CheckBeginCast(selectedTarget);
        }


        /// <summary>
		/// Summon the pet.
		/// </summary>
		/// <param name="target"></param>
		/// <param name="effectiveness"></param>
        public override void ApplyEffectOnTarget(GameLiving target, double effectiveness)
        {
            base.ApplyEffectOnTarget(target, effectiveness);

            pet.TempProperties.setProperty("target", target);
            (pet.Brain as IOldAggressiveBrain).AddToAggroList(target, 1);
            (pet.Brain as HoundsPetBrain).Think();

           // Caster.PetCount++;

           // if (Caster.PetCount <= 3)

           //     Caster.PetCount++;
        }
        
        /// <summary>
        /// Despawn pet.
        /// </summary>
        /// <param name="effect"></param>
        /// <param name="noMessages"></param>
        /// <returns>Immunity timer (in milliseconds).</returns>
        public override int OnEffectExpires(GameSpellEffect effect, bool noMessages)
        {
            if (Caster.PetCount > 0)
                Caster.PetCount--;

            return base.OnEffectExpires(effect, noMessages);
        }

        protected override void AddHandlers()
        {
        }

        protected override GamePet GetGamePet(INpcTemplate template)
        {
            return new HoundsPet(template);
        }

        protected override IControlledBrain GetPetBrain(GameLiving owner)
        {
            return new HoundsPetBrain(owner);
        }

        protected override void SetBrainToOwner(IControlledBrain brain)
        {
        }

        protected override void GetPetLocation(out int x, out int y, out int z, out ushort heading, out Region region)
        {
            base.GetPetLocation(out x, out y, out z, out heading, out region);
            heading = Caster.Heading;
        }
    }
}
